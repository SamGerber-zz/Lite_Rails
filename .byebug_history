quit
self.class.before_filters[:all]
quit
self.class.before_filters[:all]
self.class.before_filters[:all].unshift("hi")
self.class.before_filters[:all]
self.class.before_filters
self.class.before_filters[:all].unshift(:authenticity_t)
self.class.    before_filters[:all].unshift(method)
self.class.before_filters
self.prepend_before_filter(:verify_authenticity_token]
self.class.before_filters
self.class.protect_from_forgery
self.class.before_filters
self.class.ivar_get(@before_filters)
quit
self.class.ivar_get(@before_filters)
self.class.instance_variables.first
self.class.instance_variables
self.class.before_filters
quit
self.class.before_filters
before_filters
quit
before_filters
quit
@logger.error(ex)
quit
@logger.error(ex)
ex
flash
quit
@flash_keep
n
s
n
flash.each
flash
n
flash.each
quit
flash.quit do |category, messages| puts category end
flash.each do |category, messages| puts category end
flash.each do |category, messages| p category end
flash.each do |category, messages|
flash.each
html_erb
n
s
n
s
n
flash.each
flashes
flash.flashes
flashes
flash[:notice]
flash
n
flash
n
c
n
flash
n
c
flash.each
flash
n
quit
@flash_now
n
@flash_now
n
req.cookies
c
res.header
res.cookies
flash.now[:notice] += ["Woohoo!"]
flash[:notice] += ["yo!"]
flash[:notice]
flash
quit
cookie_val
n
cookie
n
s
options
self
n
s
res.cookies
res.cookie
res
res.set_cookie(FLASH_NAME, @flash_keep.to_json)
json
@flash_keep.to_json
@flash_keep
res
n
@flash_keep
@flash_now
req.cookies[FLASH_NAME]
req.cookies
@req
@flash_keep
@flash_now
n
s
n
flash.each
flash
n
flash.each
quit
flash.quit do |category, messages| puts category end
flash.each do |category, messages| puts category end
flash.each do |category, messages| p category end
flash.each do |category, messages|
flash.each
html_erb
n
s
n
s
n
flash.each
flashes
flash.flashes
flashes
flash[:notice]
flash
n
flash
n
c
n
flash
n
c
flash.each
flash
n
quit
@flash_now
n
@flash_now
n
req.cookies
c
res.header
res.cookies
flash.now[:notice] += ["Woohoo!"]
flash[:notice] += ["yo!"]
flash[:notice]
flash
quit
cookie_val
n
cookie
n
s
options
self
n
s
res.cookies
res.cookie
res
res.set_cookie(FLASH_NAME, @flash_keep.to_json)
json
@flash_keep.to_json
@flash_keep
res
n
@flash_keep
@flash_now
req.cookies[FLASH_NAME]
req.cookies
@req
